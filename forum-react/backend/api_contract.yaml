openapi: 3.0.0
info:
  version: "1.0.0"
  title: Internet Forum API
  license:
    name: MIT
    url: "https://opensource.org/license/MIT/"
tags:
  - name: Authentication
    description: Operations for authentication endpoints
  - name: User
    description: Operations for user endpoints
  - name: Post
    description: Operations for post endpoints
paths:
  /auth/login:
    post:
      tags:
        - Authentication
      description: Logs in a User
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
            example: { username: "John", password: "12345" }
      responses:
        "200":
          description: JSON Web Token
          content:
            application/json:
              schema:
                type: string
              example: { token: xxxxx.yyyyy.zzzzz }
        "401":
          description: Unauthorized
  /auth/register:
    post:
      tags:
        - Authentication
      description: Registers a new user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                displayname:
                  type: string
                password:
                  type: string
            example:
              { username: "John", displayname: "Johm", password: "12345" }
      responses:
        "200":
          description: JSON Web Token
          content:
            application/json:
              schema:
                type: string
              example: { token: xxxxx.yyyyy.zzzzz }
        "401":
          description: Unauthorized
  # ----------------------------------------------------------------------
  /users:
    get:
      tags:
        - User
      responses:
        "200":
          description: List with all users
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    username:
                      type: string
                    displayname:
                      type: string
                    password:
                      type: string
                    enabled:
                      type: boolean
                    authorities:
                      type: array
                      items:
                        type: string
                    accountNonLocked:
                      type: boolean
                    appUserRole:
                      type: string
                    accountNonExpired:
                      type: boolean
                    credentialsNonExpired:
                      type: boolean
                example:
                  [
                    {
                      "id": "a9a728e6-e604-4c9c-9796-805be273d8ad",
                      "username": "Bernd",
                      "displayname": "Bernd",
                      "password": "$2a$10$zXQMsPtiWWYY9qXQ6brdO.OdwRBvcGxhq1NcJldGxmuEiEfV2Udze",
                      "enabled": true,
                      "authorities": [{ "authority": "USER" }],
                      "accountNonLocked": true,
                      "appUserRole": "USER",
                      "accountNonExpired": true,
                      "credentialsNonExpired": true,
                    },
                    {},
                  ]
    post:
      tags:
        - User
      description: Adds a new user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                displayname:
                  type: string
                password:
                  type: string

              example:
                { username: "John", displayname: "John", password: "12345" }
      responses:
        "201":
          description: User was created
        "400":
          description: Bad request
        "409":
          description: Username already exsists
  /users/{userID}:
    get:
      tags:
        - User
      description: Gets user by ID
      parameters:
        - in: path
          name: userID
          schema:
            type: integer
          required: true
          description: Numeric ID of the user
      responses:
        "200":
          description: User was found
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    username:
                      type: string
                    displayname:
                      type: string
                    password:
                      type: string
                    enabled:
                      type: boolean
                    authorities:
                      type: array
                      items:
                        type: string
                    accountNonLocked:
                      type: boolean
                    appUserRole:
                      type: string
                    accountNonExpired:
                      type: boolean
                    credentialsNonExpired:
                      type: boolean
                example:
                  {
                    "id": "a9a728e6-e604-4c9c-9796-805be273d8ad",
                    "username": "Bernd",
                    "displayname": "Bernd",
                    "password": "$2a$10$zXQMsPtiWWYY9qXQ6brdO.OdwRBvcGxhq1NcJldGxmuEiEfV2Udze",
                    "enabled": true,
                    "authorities": [{ "authority": "USER" }],
                    "accountNonLocked": true,
                    "appUserRole": "USER",
                    "accountNonExpired": true,
                    "credentialsNonExpired": true,
                  }
        "404":
          description: User doesn't exist
        "500":
          description: Internal Server Error
    put:
      tags:
        - User
      description: Updates the user
      parameters:
        - in: path
          name: userID
          schema:
            type: integer
          required: true
          description: Numeric ID of the user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                displayname:
                  type: string
                password:
                  type: string

              example:
                { username: "John", displayname: "John", password: "12345" }
      responses:
        "200":
          description: User was updated
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "409":
          description: Username already exsists
    delete:
      tags:
        - User
      description: Deletes the user
      parameters:
        - in: path
          name: userID
          schema:
            type: integer
          required: true
          description: Numeric ID of the user
      responses:
        "200":
          description: User was deleted
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "409":
          description: Username already exsists
  /public/posts:
    get:
      tags:
        - Post
      responses:
        "200":
          description: List with all posts
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    title:
                      type: string
                    body:
                      type: string
                    cerated_at:
                      type: string
                    updated_at:
                      type: boolean
                    author:
                      type: object
                example:
                  [
                    {
                      "id": "1351e5db-3ecc-4e5c-bf42-0f521a0e6ba5",
                      "title": "This restaurant is amazing!",
                      "body": "Im talking about my place in made up street 3",
                      "created_at": 1703806909242,
                      "updated_at": 1703806909242,
                      "author": {},
                    },
                    {},
                  ]
  /public/posts/{postID}:
    get:
      tags:
        - Post
      description: Gets post by ID
      parameters:
        - in: path
          name: postID
          schema:
            type: integer
          required: true
          description: Numeric ID of the post
      responses:
        "200":
          description: Post was found
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    title:
                      type: string
                    body:
                      type: string
                    cerated_at:
                      type: string
                    updated_at:
                      type: boolean
                    author:
                      type: object
                example:
                  {
                    "id": "1351e5db-3ecc-4e5c-bf42-0f521a0e6ba5",
                    "title": "This restaurant is amazing!",
                    "body": "Im talking about my place in made up street 3",
                    "created_at": 1703806909242,
                    "updated_at": 1703806909242,
                    "author": {},
                  }
        "404":
          description: Post doesn't exist
        "500":
          description: Internal Server Error
  /posts:
    post:
      tags:
        - Post
      description: Adds a new post
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                body:
                  type: string
              example:
                {
                  "title": "This restaurant is amazing!",
                  "body": "Im talking about my place in made up street 3",
                }
      responses:
        "201":
          description: Post was created
        "400":
          description: Bad request
  /posts/{postID}:
    put:
      tags:
        - Post
      description: Updates the post
      parameters:
        - in: path
          name: postID
          schema:
            type: integer
          required: true
          description: Numeric ID of the post
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                body:
                  type: string
              example: { title: "New Title", body: "New Body" }
      responses:
        "200":
          description: Post was updated
        "400":
          description: Bad request
        "401":
          description: Unauthorized
    delete:
      tags:
        - Post
      description: Deletes the post
      parameters:
        - in: path
          name: postID
          schema:
            type: integer
          required: true
          description: Numeric ID of the post
      responses:
        "200":
          description: Post was deleted
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "409":
          description: Username already exsists
